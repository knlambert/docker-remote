// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/std/ioutil/ioutil.go

// Package mock_ioutil is a generated GoMock package.
package mock_ioutil

import (
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
)

// MockIOUtil is a mock of IOUtil interface
type MockIOUtil struct {
	ctrl     *gomock.Controller
	recorder *MockIOUtilMockRecorder
}

// MockIOUtilMockRecorder is the mock recorder for MockIOUtil
type MockIOUtilMockRecorder struct {
	mock *MockIOUtil
}

// NewMockIOUtil creates a new mock instance
func NewMockIOUtil(ctrl *gomock.Controller) *MockIOUtil {
	mock := &MockIOUtil{ctrl: ctrl}
	mock.recorder = &MockIOUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIOUtil) EXPECT() *MockIOUtilMockRecorder {
	return m.recorder
}

// WriteFile mocks base method
func (m *MockIOUtil) WriteFile(filename string, data []byte, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", filename, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile
func (mr *MockIOUtilMockRecorder) WriteFile(filename, data, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockIOUtil)(nil).WriteFile), filename, data, perm)
}
